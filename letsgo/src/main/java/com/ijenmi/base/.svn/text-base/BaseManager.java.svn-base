package com.hiseas.base;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.dao.DataAccessException;
import org.springframework.transaction.annotation.Transactional;

import com.hiseas.util.Utils;

import cn.org.commonframework.util.ObjectUtils;
import static com.hiseas.common.CommonConstant.*;

@Transactional
public abstract class BaseManager <E,PK extends Serializable>{
	
	protected Log log = LogFactory.getLog(getClass());

	protected abstract EntityDao getEntityDao();
	protected abstract EntityDao getHistoryEntityDao();
	
	@Transactional(readOnly=true)
	public E getById(PK id) throws DataAccessException{
		return (E)getEntityDao().getById(id);
	}
	
	@Transactional(readOnly=true)
	public List<E> getAll() throws DataAccessException{
		return getEntityDao().findAll();
	}
	/**根据字段名称与条件字符串，获取所有满足条件的数据*/
	@Transactional(readOnly=true)
	public List<E> getAllByIds(String propertyName,String ids) throws DataAccessException{
		return getEntityDao().findAllByIds(propertyName,ids);
	}
	
	/** 根据id检查是否插入或是更新数据 */
	@Deprecated
	public void saveOrUpdate(E entity) throws DataAccessException{
		saveOrUpdate(entity, "unkown");
	}
	
	/** 根据id检查是否插入或是更新数据 。带更新者用户名*/
	public void saveOrUpdate(E entity, String loginUser) throws DataAccessException{
		Object id = getEntityDao().getIdentifierPropertyValue(entity);
		if(ObjectUtils.isNullOrEmptyString(id)) {
			save(entity, loginUser);
		}else {
			update(entity, loginUser);
		}
		// getEntityDao().saveOrUpdate(entity);
	}
	
	/** 插入数据 */
	@Deprecated
	public void save(E entity) throws DataAccessException{
		save(entity,"unkown");
	}
	/** 插入数据。带更新者用户名 */
	public void save(E entity, String loginUser) throws DataAccessException{
		if(isHistoryManaged())
			setUpdateInfo(entity,loginUser,0);
		getEntityDao().save(entity);
		if(isHistoryManaged()){
			// 插入新纪录后同时在履历表创建一条履历
			backup(entity,loginUser,UPDATETYPE_CREATE);
		}
	}
	
	/** 删除数据 */
	@Deprecated
	public void removeById(PK id) throws DataAccessException{
		removeById(id, "unkown");
	}
	
	/** 删除数据。带更新者用户名 */
	public void removeById(PK id, String loginUser) throws DataAccessException{
		// 删除记录前在履历表创建一条履历
		E entity = getById(id);
		if(isHistoryManaged())
			backup(entity,loginUser,UPDATETYPE_DELETED);
		getEntityDao().deleteById(id);
	}
	
	/** 更新数据  */
	@Deprecated
	public void update(E entity) throws DataAccessException{
		update(entity, "unkown");
	}
	/** 更新数据。  带更新者用户名 */
	public void update(E entity, String loginUser) throws DataAccessException{
		Object id = getEntityDao().getIdentifierPropertyValue(entity);
		if(isHistoryManaged())
			setUpdateInfo(entity,loginUser,getEntityDao().getHistoryCount((Serializable) id));
		getEntityDao().update(entity);
		if(isHistoryManaged()){
			// 更新纪录后同时在履历表创建一条履历
			backup(entity,loginUser,UPDATETYPE_REVISION);
		}
	}
	
	
	@Transactional(readOnly=true)
	public boolean isUnique(E entity, String uniquePropertyNames) throws DataAccessException {
		return getEntityDao().isUnique(entity, uniquePropertyNames);
	}
	
	/**
	 * 查看本服务的实体表是否带有履历记录
	 * @return
	 */
	public boolean isHistoryManaged(){
		try {
			Class historyDao = Class.forName(getEntityDao().getHistoryDaoClassName());
			if(null!=historyDao)
				return true;
			else
				return false;
		} catch (ClassNotFoundException e) {
			return false;
		}
	}
	
	/** 设置版本履历概要 
	 * 
	 * @param entity
	 * @param loginUserName
	 * @param updateType
	 */
	public void setUpdateInfo(E entity, String longinUserName, Integer revisionCount){
		Date updateDate = new Date();
		
		String entityClassName = Utils.getClassGenricType(this.getClass()).getName();

		try {
			//entity = (E)Class.forName(entityClassName).newInstance();
			
			Method  setLastUpdateTimeMethed = entity.getClass().getMethod( "setLastUpdateTime", Date.class);
			Method  setLastUpdateUserMethed = entity.getClass().getMethod( "setLastUpdateUser", String.class);
			Method  setRevisionCountMethed = entity.getClass().getMethod( "setRevisionCount", Integer.class);
			
			setLastUpdateTimeMethed.invoke(entity, updateDate);
			setLastUpdateUserMethed.invoke(entity, longinUserName);
			setRevisionCountMethed.invoke(entity, revisionCount);
			
		}catch(Exception e){
			log.info(entityClassName + "没有履历概要字段");
			log.info(e.getMessage());
		}
	}
	
	/** 记录版本履历详情 
	 * 
	 * @param entity
	 * @param loginUserName
	 * @param updateType
	 */
	public void backup(E entity, String loginUserName, String updateType){
		// 没有历史记录表，无法记录
		if(!isHistoryManaged())
			return;
		
		Date updateDate = new Date();
		
		String entityClassName = Utils.getClassGenricType(this.getClass()).getName();
		String historyEntiryClassName = entityClassName + "History";
		
		BaseEntity historyEntiry = null;
		try {
			historyEntiry = (BaseEntity)Class.forName(historyEntiryClassName).newInstance();
		} catch (InstantiationException e) {
			// TODO Auto-generated catch block
			log.error("创建" + entityClassName + "的履历实体 " + entityClassName +"失败");
			log.error(e.getMessage());
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			log.error("创建" + entityClassName + "的履历实体 " + entityClassName +"失败");
			log.error(e.getMessage());
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			log.error("创建" + entityClassName + "的履历实体 " + entityClassName +"失败");
			log.error(e.getMessage());
		}
		BeanUtils.copyProperties(entity, historyEntiry);
		
		try {
			Method  setUpdateTimeMethed = historyEntiry.getClass().getMethod( "setUpdateTime", Date.class);
			Method  setUpdateUserMethed = historyEntiry.getClass().getMethod( "setUpdateUser", String.class);
			Method  setUpdateTypeMethed = historyEntiry.getClass().getMethod( "setUpdateType", String.class);
			
			setUpdateTimeMethed.invoke(historyEntiry, updateDate);
			setUpdateUserMethed.invoke(historyEntiry, loginUserName);
			setUpdateTypeMethed.invoke(historyEntiry, updateType);
		} catch (IllegalArgumentException e) {
			log.error(e.getMessage());
		} catch (IllegalAccessException e) {
			log.error(e.getMessage());
		} catch (InvocationTargetException e) {
			log.error(e.getMessage());
		} catch (SecurityException e) {
			log.error(e.getMessage());
		} catch (NoSuchMethodException e) {
			log.error(e.getMessage());
		}
		this.getHistoryEntityDao().save(historyEntiry);
		
	}
	
//	public void backup(E entity, String loginUserName, PK id, String updateType){
//		// 没有历史记录表，无法记录
//		if(!isHistoryManaged())
//			return;
//		
//		
//	}
}
